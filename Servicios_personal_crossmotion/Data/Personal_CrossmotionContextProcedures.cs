// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Servicios_personal_crossmotion.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Servicios_personal_crossmotion.Data
{
    public partial class Personal_CrossmotionContext
    {
        private Personal_CrossmotionContextProcedures _procedures;

        public virtual Personal_CrossmotionContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Personal_CrossmotionContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public Personal_CrossmotionContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<agregarPersonalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<editarPersonalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<eliminarPersonalResult>().HasNoKey().ToView(null);
        }
    }

    public interface IPersonal_CrossmotionContextProceduresContract
    {
        Task<int> agregarPersonalAsync(string nombre, string apellido, DateTime? fecha_nacimiento, int? fk_departamento, CancellationToken cancellationToken = default);
        Task<int> editarPersonalAsync(int? id_personal, string nombre, string apellido, DateTime? fecha_nacimiento, int? fk_departamento, CancellationToken cancellationToken = default);
        Task<int> eliminarPersonalAsync(int? id_personal, bool? estatus, CancellationToken cancellationToken = default);
    }

    public partial class Personal_CrossmotionContextProcedures
    {
        private readonly Personal_CrossmotionContext _context;

        public Personal_CrossmotionContextProcedures(Personal_CrossmotionContext context)
        {
            _context = context;
        }

        public virtual async Task<int> agregarPersonalAsync(string nombre, string apellido, DateTime? fecha_nacimiento, int? fk_departamento, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 200,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "apellido",
                    Size = 200,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecha_nacimiento",
                    Value = fecha_nacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "fk_departamento",
                    Value = fk_departamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[agregarPersonal] @nombre, @apellido, @fecha_nacimiento, @fk_departamento", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> editarPersonalAsync(int? id_personal, string nombre, string apellido, DateTime? fecha_nacimiento, int? fk_departamento, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_personal",
                    Value = id_personal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 200,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "apellido",
                    Size = 200,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecha_nacimiento",
                    Value = fecha_nacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "fk_departamento",
                    Value = fk_departamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[editarPersonal] @id_personal, @nombre, @apellido, @fecha_nacimiento, @fk_departamento", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> eliminarPersonalAsync(int? id_personal, bool? estatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_personal",
                    Value = id_personal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "estatus",
                    Value = estatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[eliminarPersonal] @id_personal, @estatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
